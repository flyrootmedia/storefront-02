@import './variables';

@mixin ellipsis () {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin appearance($property) {
	-moz-appearance: $property;
	-webkit-appearance: $property;
	appearance: $property;
}

@mixin rounded($top_left, $top_right:null, $bottom_right:null, $bottom_left:null) {
	@if ($top_right) {
	-webkit-border-radius: $top_left $top_right $bottom_right $bottom_left;
	   -moz-border-radius: $top_left $top_right $bottom_right $bottom_left;
	        border-radius: $top_left $top_right $bottom_right $bottom_left;
	} @else {
	-webkit-border-radius: $top_left;
	   -moz-border-radius: $top_left;
	        border-radius: $top_left;
	}
}

@mixin shadow($x, $y, $blur, $color) {
	-webkit-box-shadow: $x $y $blur $color;
	   -moz-box-shadow: $x $y $blur $color;
	        box-shadow: $x $y $blur $color;   
}

@mixin shadow-none {
	-webkit-box-shadow: none;
	   -moz-box-shadow: none;
	        box-shadow: none;   
}

@mixin shadow-inset($x, $y, $blur, $color) {
	-webkit-box-shadow: inset $x $y $blur $color;
	   -moz-box-shadow: inset $x $y $blur $color;
	        box-shadow: inset $x $y $blur $color;
}

@mixin transform($property) {
	-webkit-transform: $property;
       -moz-transform: $property;
		-ms-transform: $property;
		 -o-transform: $property;
            transform: $property;    
}

@mixin transition($property, $time, $type) {
	@if ($property == 'none') {
		-webkit-transition: $property;
			-moz-transition: $property;
				-o-transition: $property; 
						transition: $property;
	} @else {
		-webkit-transition: $property $time $type;
			-moz-transition: $property $time $type;
				-o-transition: $property $time $type; 
						transition: $property $time $type;
	}
}

@mixin box-sizing {
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;	   
}

@mixin opacity($opacity) {
    -ms-filter: opacity($opacity);
    $opacity-ie: $opacity * 100;
    
    filter: alpha(opacity=$opacity-ie);
    -webkit-opacity: $opacity;
    -moz-opacity: $opacity;
    -o-opacity: $opacity;
    opacity: $opacity;
}

@mixin linear-gradient ($from, $to, $direction1:top, $direction2:bottom) {
	background-color: $from;

	/* Mozilla Firefox */
	background-image:-moz-linear-gradient($direction1, $from, $to);

	/* Opera */
	background-image:-o-linear-gradient($direction1, $from, $to);

	/* WebKit (Chrome 11+) */
	background-image:-webkit-gradient(linear, left $direction1, left $direction2, color-stop(0, $from), color-stop(1, $to));

	/* WebKit (Safari 5.1, Chrome 10+) */
	background-image:-webkit-linear-gradient($direction1, $from, $to);

	/* IE10 */
	background-image:-ms-linear-gradient($direction1, $from, $to);

	/* W3C*/
	background-image:linear-gradient(to $direction2, $from, $to);
}

@mixin clearfix {
	*zoom: 1;
	&::after, &::before {
		content: "";
		display: table;
	}
	&::after {
		clear: both;
	}
}

@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	
	@if $index {
	  @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	
	@return $string;
}

@mixin calc($property, $expression, $important: '') {
	$expression: str-replace($expression, ' + ', ' - -');
    #{$property}:-webkit-calc(#{$expression})#{$important};
    #{$property}:   -moz-calc(#{$expression})#{$important};
    #{$property}:        calc(#{$expression})#{$important};
}

@mixin user-select($value) {
	  /* (Chrome, Safari) - "all" does not work in Safari, use only "none" or "text", or else it will allow to type in the html container */
	-webkit-user-select: $value;

	/* Firefox all */
	-moz-user-select: $value;

	/* IE 10+ */
	-ms-user-select: $value;

	/* W3C */
	user-select: $value;
}

@mixin font-antialiasing {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin backgroundSize($size) {
	-moz-background-size: $size;
	-webkit-background-size: $size;
	background-size: $size;
}

@mixin fitContent($property) {
	#{$property}: -webkit-fit-content !important;
	#{$property}: -moz-fit-content !important;
	#{$property}: fit-content !important;
}

// Return Image URL
@function -imgURL($image, $subdir:'') {
	@return url('/images/'+$subdir+'/'+$image);
}

//using !important here since these styles should never be overridden
@mixin screen-reader-only {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0,0,0,0) !important;
    border: 0 !important;
    color:#000 !important;
    background-color:#FFF !important;
}

@mixin hidden-focusable {
	/* not for screen readers only, but we want the same hidden behavior */
	@include screen-reader-only;

	&:active,
	&:focus {
	  position: static !important;
	  width: auto !important;
	  height: auto !important;
	  overflow: visible !important;
	  clip: auto !important;
	  white-space: normal;
	  clip-path: none;
	  background-color:transparent !important;
	  color:#000 !important;
	}
}

@function z-index($key) {
    @return map-get($z-index, $key);
}

@mixin z-index($key) {
    z-index: z-index($key);
}

/// Map deep get
// @author Hugo Giraudel
// @param {Map} $map      - Map
// @param {Arglist} $keys - Key chain
// @return {*}            - Desired value
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
			$map: map-get($map, $key);
	}

	@return $map;
}


@mixin button-state-default($style: 'primary') {
	box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);
	@include rounded(4px);
	cursor: pointer;
	border-style: solid;
	border-width: 2px;

	@if $style == 'primary' {
		color: #fff !important;
		background-color: $color-brand-main;
		border-color: $color-brand-main-tint $color-brand-main-shade $color-brand-main-shade $color-brand-main-tint;
	}

	@if $style == 'secondary' {
		background-color: $color-gray-four;
		color: $color-gray-one;
		border-color: $color-gray-three;
	}
}

@mixin button-state-hover($style: 'primary') {
	@if $style == 'primary' {
		color: #fff !important;
		background-color: $color-brand-main-shade;
	}

	@if $style == 'secondary' {
		border-color: $color-gray-two;
	}
}

@mixin button-state-focused($style: 'primary') {
	@if $style == 'primary' {
		color: #fff !important;
		background-color: $color-brand-main-shade;
	}

	@if $style == 'secondary' {
		background-color: #fff;
	}
}

@mixin button-state-disabled {
	cursor: default;
	box-shadow: none;
	background-color: $color-gray-four;
	border: none;
}

@mixin focus-element {
	outline-color: rgba(59, 153, 252, 0.65);
	outline-color: -webkit-focus-ring-color;
	outline-style: auto;
	outline-width: 1px;
	box-shadow: none;
}

// for multi-line CSS ellipses
// @param $lines: number of lines to show
@mixin line-clamp ($lines) {
	overflow: hidden;
	display: -webkit-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
}

